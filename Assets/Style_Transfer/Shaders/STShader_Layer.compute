// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ProcessInput
#pragma kernel ProcessOutput
#pragma kernel Merge

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<half4> Result;

// Stores the input image and is set with cs.SetTexture
Texture2D<half4> InputImage;
Texture2D<half4> StyleImage2;// estilo 2
Texture2D<float4> StyleImage3;   // estilo 3

// Stores the depth data from the StyleDepth camera
Texture2D<half4> StyleDepth;

// Stores the depth data from the SourceDepth camera
Texture2D<half4> SrcDepth;
Texture2D<half4> StyleDepth2;       // style 2
Texture2D<float>  StyleDepth3;    // style 3

// Store the original image from the current frame
Texture2D<half4> SrcImage;

[numthreads(8, 8, 1)]
void ProcessInput(uint3 id : SV_DispatchThreadID)
{ 
    Result[id.xy] = half4((InputImage[id.xy].x * 255.0h),
      (InputImage[id.xy].y * 255.0h),
      (InputImage[id.xy].z * 255.0h), 1.0h);
} 

[numthreads(8, 8, 1)] 
void ProcessOutput(uint3 id : SV_DispatchThreadID) 
{ 
    Result[id.xy] = half4((clamp(InputImage[id.xy].x, 0.0f, 255.0f) / 255.0f),
      (clamp(InputImage[id.xy].y, 0.0f, 255.0f) / 255.0f),
      (clamp(InputImage[id.xy].z, 0.0f, 255.0f) / 255.0f), 1.0h);
}

[numthreads(8, 8, 1)]
void Merge(uint3 id : SV_DispatchThreadID)
{
    float sd1 = StyleDepth[id.xy].x;
    float sd2 = StyleDepth2[id.xy].x;
    float sd3 = StyleDepth3[id.xy].x;// (1) Leemos la profundidad del tercer estilo
    float srcD = SrcDepth[id.xy].x;

    float threshold = 0.001;

    
    if (sd1 > 0 && abs(sd1 - srcD) < threshold) {
        Result[id.xy] = InputImage[id.xy]; // estilo 1
    }
    else if (sd2 > 0 && abs(sd2 - srcD) < threshold) {
        Result[id.xy] = StyleImage2[id.xy]; // estilo 2
    }
    else if (sd3 > 0 && abs(sd3 - srcD) < threshold) {
        Result[id.xy] = StyleImage3[id.xy];   // estilo 3
    }
    else {
        Result[id.xy] = SrcImage[id.xy]; // original
    }
}
